* Captain Git Hook

A configurable installation of Git hooks and tools for use in software
development teams.

[[https://travis-ci.com/jemstep/captain-git-hook][https://travis-ci.com/jemstep/captain-git-hook.svg?branch=master]]

** Build and Install from Source

*** Prerequisites

Captain Git Hook is written in the Rust programming language. You can
download the Rust toolchain from the [[https://www.rust-lang.org/tools/install][Rust website]].

This project targets the latest stable release of the Rust toolchain.

*** Test

The project can be compiled and the unit tests run using Cargo. As
you're adding new functionality, it's recommended to also add unit
tests for that functionality.

#+BEGIN_SRC shell
  cargo test
#+END_SRC

*** Build and Run

Captain Git Hook can be built and run directly from Cargo. One
important thing to know is that the ~--~ on the command line separates
the arguments being passed to Cargo from the arguments being passed to
Captain Git Hook.

#+BEGIN_SRC shell
  cargo run -- <capn_args>
#+END_SRC

This is useful for limited testing, but many of the commands of the
CLI expect to be called by Git with certain inputs, so it's
recommended to rather install binary to your path for local use.

*** Build and Install

Most usages of the project assume that you have the project built and
installed on your path. This can be done through Cargo, by running the
install command.

#+BEGIN_SRC shell
  cargo install --path .
#+END_SRC

This will add an executable to your path called ~capn~.

#+BEGIN_SRC shell
  capn --version
#+END_SRC

** Usage

*** Git Hooks

Captain Git Hook works by installing hooks in your Git repository. Git
will then call out to Captain Git Hook at various points in its
lifecycle.

To get started, go to your Git repo and run the ~install-hooks~
command.

#+BEGIN_SRC shell
  capn install-hooks
#+END_SRC

*** Policy Configuration

The policies that Captain Git Hook will apply for a repo are
controlled by a ~.capn~ configuration file in the root of the
project's repo. This configuration file is in TOML format.

This is an example ~.capn~ file: [[./.capn]]


* Development

** Integration tests
Some of the end to end tests require a valid Git repository and GPG
key to run.

To facilitate this, there is a bare Git repo, set up as a test
repository, checked in to the tests folder of this repo. It is located
at [[./tests/test-repo.git]].

To add extra testing scenarios, you'll probably need to add additional
commits to this bare repo. To do this, clone the repo somewhere else
on your drive with 

#+BEGIN_SRC sh
  git clone <path to test-repo.git>
#+END_SRC

Make any required commits, and push the changes back. Then commit the
changes in this repo.

To create valid commits for these tests, you need to sign the commits
with the secret key in [[./tests/test-secret-key.asc]]. The password to
import this key is 'test'.

* License

This software may be used under the conditions of the Apache License.

Copyright 2019 Jemstep Incorporated

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
